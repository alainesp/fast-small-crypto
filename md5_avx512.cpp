//////////////////////////////////////////////////////////////////////////////////////////////////////////////
// MD5 Message-Digest Algorithm
//////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Automatically generated code by SIMD-function library

#define SimdScalarType uint32_t
#include "simd.hpp"
using namespace simd;

/// <summary>
/// MD5 compress block
/// </summary>
/// <param name="state">The md5 state</param>
/// <param name="block">The message to compress</param>
extern "C" void md5_block_avx512_x4(simd::Vec512u32 state[16], const simd::Vec512u32 block[64]) noexcept
{
	simd::Vec512u32 a0, a1, a2, a3, b0, b1, b2, b3, c0, c1, c2, c3, d0, d1, d2, d3, t0, t1, t2, t3;

	// Load state
	a0 = load(state +  0);	a1 = load(state +  1);	a2 = load(state +  2);	a3 = load(state +  3);
	b0 = load(state +  4);	b1 = load(state +  5);	b2 = load(state +  6);	b3 = load(state +  7);
	c0 = load(state +  8);	c1 = load(state +  9);	c2 = load(state + 10);	c3 = load(state + 11);
	d0 = load(state + 12);	d1 = load(state + 13);	d2 = load(state + 14);	d3 = load(state + 15);

	// Round 1
	a0 += load(block +  0);	a1 += load(block +  1);	a2 += load(block +  2);	a3 += load(block +  3);	t0 = ternary_logic<0xd8>(d0, c0, b0);	t1 = ternary_logic<0xd8>(d1, c1, b1);	t2 = ternary_logic<0xd8>(d2, c2, b2);	t3 = ternary_logic<0xd8>(d3, c3, b3);	a0 += UINT32_C(0xd76aa478);	a1 += UINT32_C(0xd76aa478);	a2 += UINT32_C(0xd76aa478);	a3 += UINT32_C(0xd76aa478);	a0 += t0;	a1 += t1;	a2 += t2;	a3 += t3;	a0 = rotl<uint32_t,  7>(a0,  7);	a1 = rotl<uint32_t,  7>(a1,  7);	a2 = rotl<uint32_t,  7>(a2,  7);	a3 = rotl<uint32_t,  7>(a3,  7);	a0 += b0;	a1 += b1;	a2 += b2;	a3 += b3;
	d0 += load(block +  4);	d1 += load(block +  5);	d2 += load(block +  6);	d3 += load(block +  7);	t0 = ternary_logic<0xd8>(c0, b0, a0);	t1 = ternary_logic<0xd8>(c1, b1, a1);	t2 = ternary_logic<0xd8>(c2, b2, a2);	t3 = ternary_logic<0xd8>(c3, b3, a3);	d0 += UINT32_C(0xe8c7b756);	d1 += UINT32_C(0xe8c7b756);	d2 += UINT32_C(0xe8c7b756);	d3 += UINT32_C(0xe8c7b756);	d0 += t0;	d1 += t1;	d2 += t2;	d3 += t3;	d0 = rotl<uint32_t, 12>(d0, 12);	d1 = rotl<uint32_t, 12>(d1, 12);	d2 = rotl<uint32_t, 12>(d2, 12);	d3 = rotl<uint32_t, 12>(d3, 12);	d0 += a0;	d1 += a1;	d2 += a2;	d3 += a3;
	c0 += load(block +  8);	c1 += load(block +  9);	c2 += load(block + 10);	c3 += load(block + 11);	t0 = ternary_logic<0xd8>(b0, a0, d0);	t1 = ternary_logic<0xd8>(b1, a1, d1);	t2 = ternary_logic<0xd8>(b2, a2, d2);	t3 = ternary_logic<0xd8>(b3, a3, d3);	c0 += UINT32_C(0x242070db);	c1 += UINT32_C(0x242070db);	c2 += UINT32_C(0x242070db);	c3 += UINT32_C(0x242070db);	c0 += t0;	c1 += t1;	c2 += t2;	c3 += t3;	c0 = rotl<uint32_t, 17>(c0, 17);	c1 = rotl<uint32_t, 17>(c1, 17);	c2 = rotl<uint32_t, 17>(c2, 17);	c3 = rotl<uint32_t, 17>(c3, 17);	c0 += d0;	c1 += d1;	c2 += d2;	c3 += d3;
	b0 += load(block + 12);	b1 += load(block + 13);	b2 += load(block + 14);	b3 += load(block + 15);	t0 = ternary_logic<0xd8>(a0, d0, c0);	t1 = ternary_logic<0xd8>(a1, d1, c1);	t2 = ternary_logic<0xd8>(a2, d2, c2);	t3 = ternary_logic<0xd8>(a3, d3, c3);	b0 += UINT32_C(0xc1bdceee);	b1 += UINT32_C(0xc1bdceee);	b2 += UINT32_C(0xc1bdceee);	b3 += UINT32_C(0xc1bdceee);	b0 += t0;	b1 += t1;	b2 += t2;	b3 += t3;	b0 = rotl<uint32_t, 22>(b0, 22);	b1 = rotl<uint32_t, 22>(b1, 22);	b2 = rotl<uint32_t, 22>(b2, 22);	b3 = rotl<uint32_t, 22>(b3, 22);	b0 += c0;	b1 += c1;	b2 += c2;	b3 += c3;
	a0 += load(block + 16);	a1 += load(block + 17);	a2 += load(block + 18);	a3 += load(block + 19);	t0 = ternary_logic<0xd8>(d0, c0, b0);	t1 = ternary_logic<0xd8>(d1, c1, b1);	t2 = ternary_logic<0xd8>(d2, c2, b2);	t3 = ternary_logic<0xd8>(d3, c3, b3);	a0 += UINT32_C(0xf57c0faf);	a1 += UINT32_C(0xf57c0faf);	a2 += UINT32_C(0xf57c0faf);	a3 += UINT32_C(0xf57c0faf);	a0 += t0;	a1 += t1;	a2 += t2;	a3 += t3;	a0 = rotl<uint32_t,  7>(a0,  7);	a1 = rotl<uint32_t,  7>(a1,  7);	a2 = rotl<uint32_t,  7>(a2,  7);	a3 = rotl<uint32_t,  7>(a3,  7);	a0 += b0;	a1 += b1;	a2 += b2;	a3 += b3;
	d0 += load(block + 20);	d1 += load(block + 21);	d2 += load(block + 22);	d3 += load(block + 23);	t0 = ternary_logic<0xd8>(c0, b0, a0);	t1 = ternary_logic<0xd8>(c1, b1, a1);	t2 = ternary_logic<0xd8>(c2, b2, a2);	t3 = ternary_logic<0xd8>(c3, b3, a3);	d0 += UINT32_C(0x4787c62a);	d1 += UINT32_C(0x4787c62a);	d2 += UINT32_C(0x4787c62a);	d3 += UINT32_C(0x4787c62a);	d0 += t0;	d1 += t1;	d2 += t2;	d3 += t3;	d0 = rotl<uint32_t, 12>(d0, 12);	d1 = rotl<uint32_t, 12>(d1, 12);	d2 = rotl<uint32_t, 12>(d2, 12);	d3 = rotl<uint32_t, 12>(d3, 12);	d0 += a0;	d1 += a1;	d2 += a2;	d3 += a3;
	c0 += load(block + 24);	c1 += load(block + 25);	c2 += load(block + 26);	c3 += load(block + 27);	t0 = ternary_logic<0xd8>(b0, a0, d0);	t1 = ternary_logic<0xd8>(b1, a1, d1);	t2 = ternary_logic<0xd8>(b2, a2, d2);	t3 = ternary_logic<0xd8>(b3, a3, d3);	c0 += UINT32_C(0xa8304613);	c1 += UINT32_C(0xa8304613);	c2 += UINT32_C(0xa8304613);	c3 += UINT32_C(0xa8304613);	c0 += t0;	c1 += t1;	c2 += t2;	c3 += t3;	c0 = rotl<uint32_t, 17>(c0, 17);	c1 = rotl<uint32_t, 17>(c1, 17);	c2 = rotl<uint32_t, 17>(c2, 17);	c3 = rotl<uint32_t, 17>(c3, 17);	c0 += d0;	c1 += d1;	c2 += d2;	c3 += d3;
	b0 += load(block + 28);	b1 += load(block + 29);	b2 += load(block + 30);	b3 += load(block + 31);	t0 = ternary_logic<0xd8>(a0, d0, c0);	t1 = ternary_logic<0xd8>(a1, d1, c1);	t2 = ternary_logic<0xd8>(a2, d2, c2);	t3 = ternary_logic<0xd8>(a3, d3, c3);	b0 += UINT32_C(0xfd469501);	b1 += UINT32_C(0xfd469501);	b2 += UINT32_C(0xfd469501);	b3 += UINT32_C(0xfd469501);	b0 += t0;	b1 += t1;	b2 += t2;	b3 += t3;	b0 = rotl<uint32_t, 22>(b0, 22);	b1 = rotl<uint32_t, 22>(b1, 22);	b2 = rotl<uint32_t, 22>(b2, 22);	b3 = rotl<uint32_t, 22>(b3, 22);	b0 += c0;	b1 += c1;	b2 += c2;	b3 += c3;
	a0 += load(block + 32);	a1 += load(block + 33);	a2 += load(block + 34);	a3 += load(block + 35);	t0 = ternary_logic<0xd8>(d0, c0, b0);	t1 = ternary_logic<0xd8>(d1, c1, b1);	t2 = ternary_logic<0xd8>(d2, c2, b2);	t3 = ternary_logic<0xd8>(d3, c3, b3);	a0 += UINT32_C(0x698098d8);	a1 += UINT32_C(0x698098d8);	a2 += UINT32_C(0x698098d8);	a3 += UINT32_C(0x698098d8);	a0 += t0;	a1 += t1;	a2 += t2;	a3 += t3;	a0 = rotl<uint32_t,  7>(a0,  7);	a1 = rotl<uint32_t,  7>(a1,  7);	a2 = rotl<uint32_t,  7>(a2,  7);	a3 = rotl<uint32_t,  7>(a3,  7);	a0 += b0;	a1 += b1;	a2 += b2;	a3 += b3;
	d0 += load(block + 36);	d1 += load(block + 37);	d2 += load(block + 38);	d3 += load(block + 39);	t0 = ternary_logic<0xd8>(c0, b0, a0);	t1 = ternary_logic<0xd8>(c1, b1, a1);	t2 = ternary_logic<0xd8>(c2, b2, a2);	t3 = ternary_logic<0xd8>(c3, b3, a3);	d0 += UINT32_C(0x8b44f7af);	d1 += UINT32_C(0x8b44f7af);	d2 += UINT32_C(0x8b44f7af);	d3 += UINT32_C(0x8b44f7af);	d0 += t0;	d1 += t1;	d2 += t2;	d3 += t3;	d0 = rotl<uint32_t, 12>(d0, 12);	d1 = rotl<uint32_t, 12>(d1, 12);	d2 = rotl<uint32_t, 12>(d2, 12);	d3 = rotl<uint32_t, 12>(d3, 12);	d0 += a0;	d1 += a1;	d2 += a2;	d3 += a3;
	c0 += load(block + 40);	c1 += load(block + 41);	c2 += load(block + 42);	c3 += load(block + 43);	t0 = ternary_logic<0xd8>(b0, a0, d0);	t1 = ternary_logic<0xd8>(b1, a1, d1);	t2 = ternary_logic<0xd8>(b2, a2, d2);	t3 = ternary_logic<0xd8>(b3, a3, d3);	c0 += UINT32_C(0xffff5bb1);	c1 += UINT32_C(0xffff5bb1);	c2 += UINT32_C(0xffff5bb1);	c3 += UINT32_C(0xffff5bb1);	c0 += t0;	c1 += t1;	c2 += t2;	c3 += t3;	c0 = rotl<uint32_t, 17>(c0, 17);	c1 = rotl<uint32_t, 17>(c1, 17);	c2 = rotl<uint32_t, 17>(c2, 17);	c3 = rotl<uint32_t, 17>(c3, 17);	c0 += d0;	c1 += d1;	c2 += d2;	c3 += d3;
	b0 += load(block + 44);	b1 += load(block + 45);	b2 += load(block + 46);	b3 += load(block + 47);	t0 = ternary_logic<0xd8>(a0, d0, c0);	t1 = ternary_logic<0xd8>(a1, d1, c1);	t2 = ternary_logic<0xd8>(a2, d2, c2);	t3 = ternary_logic<0xd8>(a3, d3, c3);	b0 += UINT32_C(0x895cd7be);	b1 += UINT32_C(0x895cd7be);	b2 += UINT32_C(0x895cd7be);	b3 += UINT32_C(0x895cd7be);	b0 += t0;	b1 += t1;	b2 += t2;	b3 += t3;	b0 = rotl<uint32_t, 22>(b0, 22);	b1 = rotl<uint32_t, 22>(b1, 22);	b2 = rotl<uint32_t, 22>(b2, 22);	b3 = rotl<uint32_t, 22>(b3, 22);	b0 += c0;	b1 += c1;	b2 += c2;	b3 += c3;
	a0 += load(block + 48);	a1 += load(block + 49);	a2 += load(block + 50);	a3 += load(block + 51);	t0 = ternary_logic<0xd8>(d0, c0, b0);	t1 = ternary_logic<0xd8>(d1, c1, b1);	t2 = ternary_logic<0xd8>(d2, c2, b2);	t3 = ternary_logic<0xd8>(d3, c3, b3);	a0 += UINT32_C(0x6b901122);	a1 += UINT32_C(0x6b901122);	a2 += UINT32_C(0x6b901122);	a3 += UINT32_C(0x6b901122);	a0 += t0;	a1 += t1;	a2 += t2;	a3 += t3;	a0 = rotl<uint32_t,  7>(a0,  7);	a1 = rotl<uint32_t,  7>(a1,  7);	a2 = rotl<uint32_t,  7>(a2,  7);	a3 = rotl<uint32_t,  7>(a3,  7);	a0 += b0;	a1 += b1;	a2 += b2;	a3 += b3;
	d0 += load(block + 52);	d1 += load(block + 53);	d2 += load(block + 54);	d3 += load(block + 55);	t0 = ternary_logic<0xd8>(c0, b0, a0);	t1 = ternary_logic<0xd8>(c1, b1, a1);	t2 = ternary_logic<0xd8>(c2, b2, a2);	t3 = ternary_logic<0xd8>(c3, b3, a3);	d0 += UINT32_C(0xfd987193);	d1 += UINT32_C(0xfd987193);	d2 += UINT32_C(0xfd987193);	d3 += UINT32_C(0xfd987193);	d0 += t0;	d1 += t1;	d2 += t2;	d3 += t3;	d0 = rotl<uint32_t, 12>(d0, 12);	d1 = rotl<uint32_t, 12>(d1, 12);	d2 = rotl<uint32_t, 12>(d2, 12);	d3 = rotl<uint32_t, 12>(d3, 12);	d0 += a0;	d1 += a1;	d2 += a2;	d3 += a3;
	c0 += load(block + 56);	c1 += load(block + 57);	c2 += load(block + 58);	c3 += load(block + 59);	t0 = ternary_logic<0xd8>(b0, a0, d0);	t1 = ternary_logic<0xd8>(b1, a1, d1);	t2 = ternary_logic<0xd8>(b2, a2, d2);	t3 = ternary_logic<0xd8>(b3, a3, d3);	c0 += UINT32_C(0xa679438e);	c1 += UINT32_C(0xa679438e);	c2 += UINT32_C(0xa679438e);	c3 += UINT32_C(0xa679438e);	c0 += t0;	c1 += t1;	c2 += t2;	c3 += t3;	c0 = rotl<uint32_t, 17>(c0, 17);	c1 = rotl<uint32_t, 17>(c1, 17);	c2 = rotl<uint32_t, 17>(c2, 17);	c3 = rotl<uint32_t, 17>(c3, 17);	c0 += d0;	c1 += d1;	c2 += d2;	c3 += d3;
	b0 += load(block + 60);	b1 += load(block + 61);	b2 += load(block + 62);	b3 += load(block + 63);	t0 = ternary_logic<0xd8>(a0, d0, c0);	t1 = ternary_logic<0xd8>(a1, d1, c1);	t2 = ternary_logic<0xd8>(a2, d2, c2);	t3 = ternary_logic<0xd8>(a3, d3, c3);	b0 += UINT32_C(0x49b40821);	b1 += UINT32_C(0x49b40821);	b2 += UINT32_C(0x49b40821);	b3 += UINT32_C(0x49b40821);	b0 += t0;	b1 += t1;	b2 += t2;	b3 += t3;	b0 = rotl<uint32_t, 22>(b0, 22);	b1 = rotl<uint32_t, 22>(b1, 22);	b2 = rotl<uint32_t, 22>(b2, 22);	b3 = rotl<uint32_t, 22>(b3, 22);	b0 += c0;	b1 += c1;	b2 += c2;	b3 += c3;

	// Round 2
	a0 += load(block +  4);	a1 += load(block +  5);	a2 += load(block +  6);	a3 += load(block +  7);	t0 = ternary_logic<0xd8>(c0, b0, d0);	t1 = ternary_logic<0xd8>(c1, b1, d1);	t2 = ternary_logic<0xd8>(c2, b2, d2);	t3 = ternary_logic<0xd8>(c3, b3, d3);	a0 += UINT32_C(0xf61e2562);	a1 += UINT32_C(0xf61e2562);	a2 += UINT32_C(0xf61e2562);	a3 += UINT32_C(0xf61e2562);	a0 += t0;	a1 += t1;	a2 += t2;	a3 += t3;	a0 = rotl<uint32_t,  5>(a0,  5);	a1 = rotl<uint32_t,  5>(a1,  5);	a2 = rotl<uint32_t,  5>(a2,  5);	a3 = rotl<uint32_t,  5>(a3,  5);	a0 += b0;	a1 += b1;	a2 += b2;	a3 += b3;
	d0 += load(block + 24);	d1 += load(block + 25);	d2 += load(block + 26);	d3 += load(block + 27);	t0 = ternary_logic<0xd8>(b0, a0, c0);	t1 = ternary_logic<0xd8>(b1, a1, c1);	t2 = ternary_logic<0xd8>(b2, a2, c2);	t3 = ternary_logic<0xd8>(b3, a3, c3);	d0 += UINT32_C(0xc040b340);	d1 += UINT32_C(0xc040b340);	d2 += UINT32_C(0xc040b340);	d3 += UINT32_C(0xc040b340);	d0 += t0;	d1 += t1;	d2 += t2;	d3 += t3;	d0 = rotl<uint32_t,  9>(d0,  9);	d1 = rotl<uint32_t,  9>(d1,  9);	d2 = rotl<uint32_t,  9>(d2,  9);	d3 = rotl<uint32_t,  9>(d3,  9);	d0 += a0;	d1 += a1;	d2 += a2;	d3 += a3;
	c0 += load(block + 44);	c1 += load(block + 45);	c2 += load(block + 46);	c3 += load(block + 47);	t0 = ternary_logic<0xd8>(a0, d0, b0);	t1 = ternary_logic<0xd8>(a1, d1, b1);	t2 = ternary_logic<0xd8>(a2, d2, b2);	t3 = ternary_logic<0xd8>(a3, d3, b3);	c0 += UINT32_C(0x265e5a51);	c1 += UINT32_C(0x265e5a51);	c2 += UINT32_C(0x265e5a51);	c3 += UINT32_C(0x265e5a51);	c0 += t0;	c1 += t1;	c2 += t2;	c3 += t3;	c0 = rotl<uint32_t, 14>(c0, 14);	c1 = rotl<uint32_t, 14>(c1, 14);	c2 = rotl<uint32_t, 14>(c2, 14);	c3 = rotl<uint32_t, 14>(c3, 14);	c0 += d0;	c1 += d1;	c2 += d2;	c3 += d3;
	b0 += load(block +  0);	b1 += load(block +  1);	b2 += load(block +  2);	b3 += load(block +  3);	t0 = ternary_logic<0xd8>(d0, c0, a0);	t1 = ternary_logic<0xd8>(d1, c1, a1);	t2 = ternary_logic<0xd8>(d2, c2, a2);	t3 = ternary_logic<0xd8>(d3, c3, a3);	b0 += UINT32_C(0xe9b6c7aa);	b1 += UINT32_C(0xe9b6c7aa);	b2 += UINT32_C(0xe9b6c7aa);	b3 += UINT32_C(0xe9b6c7aa);	b0 += t0;	b1 += t1;	b2 += t2;	b3 += t3;	b0 = rotl<uint32_t, 20>(b0, 20);	b1 = rotl<uint32_t, 20>(b1, 20);	b2 = rotl<uint32_t, 20>(b2, 20);	b3 = rotl<uint32_t, 20>(b3, 20);	b0 += c0;	b1 += c1;	b2 += c2;	b3 += c3;
	a0 += load(block + 20);	a1 += load(block + 21);	a2 += load(block + 22);	a3 += load(block + 23);	t0 = ternary_logic<0xd8>(c0, b0, d0);	t1 = ternary_logic<0xd8>(c1, b1, d1);	t2 = ternary_logic<0xd8>(c2, b2, d2);	t3 = ternary_logic<0xd8>(c3, b3, d3);	a0 += UINT32_C(0xd62f105d);	a1 += UINT32_C(0xd62f105d);	a2 += UINT32_C(0xd62f105d);	a3 += UINT32_C(0xd62f105d);	a0 += t0;	a1 += t1;	a2 += t2;	a3 += t3;	a0 = rotl<uint32_t,  5>(a0,  5);	a1 = rotl<uint32_t,  5>(a1,  5);	a2 = rotl<uint32_t,  5>(a2,  5);	a3 = rotl<uint32_t,  5>(a3,  5);	a0 += b0;	a1 += b1;	a2 += b2;	a3 += b3;
	d0 += load(block + 40);	d1 += load(block + 41);	d2 += load(block + 42);	d3 += load(block + 43);	t0 = ternary_logic<0xd8>(b0, a0, c0);	t1 = ternary_logic<0xd8>(b1, a1, c1);	t2 = ternary_logic<0xd8>(b2, a2, c2);	t3 = ternary_logic<0xd8>(b3, a3, c3);	d0 += UINT32_C(0x2441453);	d1 += UINT32_C(0x2441453);	d2 += UINT32_C(0x2441453);	d3 += UINT32_C(0x2441453);	d0 += t0;	d1 += t1;	d2 += t2;	d3 += t3;	d0 = rotl<uint32_t,  9>(d0,  9);	d1 = rotl<uint32_t,  9>(d1,  9);	d2 = rotl<uint32_t,  9>(d2,  9);	d3 = rotl<uint32_t,  9>(d3,  9);	d0 += a0;	d1 += a1;	d2 += a2;	d3 += a3;
	c0 += load(block + 60);	c1 += load(block + 61);	c2 += load(block + 62);	c3 += load(block + 63);	t0 = ternary_logic<0xd8>(a0, d0, b0);	t1 = ternary_logic<0xd8>(a1, d1, b1);	t2 = ternary_logic<0xd8>(a2, d2, b2);	t3 = ternary_logic<0xd8>(a3, d3, b3);	c0 += UINT32_C(0xd8a1e681);	c1 += UINT32_C(0xd8a1e681);	c2 += UINT32_C(0xd8a1e681);	c3 += UINT32_C(0xd8a1e681);	c0 += t0;	c1 += t1;	c2 += t2;	c3 += t3;	c0 = rotl<uint32_t, 14>(c0, 14);	c1 = rotl<uint32_t, 14>(c1, 14);	c2 = rotl<uint32_t, 14>(c2, 14);	c3 = rotl<uint32_t, 14>(c3, 14);	c0 += d0;	c1 += d1;	c2 += d2;	c3 += d3;
	b0 += load(block + 16);	b1 += load(block + 17);	b2 += load(block + 18);	b3 += load(block + 19);	t0 = ternary_logic<0xd8>(d0, c0, a0);	t1 = ternary_logic<0xd8>(d1, c1, a1);	t2 = ternary_logic<0xd8>(d2, c2, a2);	t3 = ternary_logic<0xd8>(d3, c3, a3);	b0 += UINT32_C(0xe7d3fbc8);	b1 += UINT32_C(0xe7d3fbc8);	b2 += UINT32_C(0xe7d3fbc8);	b3 += UINT32_C(0xe7d3fbc8);	b0 += t0;	b1 += t1;	b2 += t2;	b3 += t3;	b0 = rotl<uint32_t, 20>(b0, 20);	b1 = rotl<uint32_t, 20>(b1, 20);	b2 = rotl<uint32_t, 20>(b2, 20);	b3 = rotl<uint32_t, 20>(b3, 20);	b0 += c0;	b1 += c1;	b2 += c2;	b3 += c3;
	a0 += load(block + 36);	a1 += load(block + 37);	a2 += load(block + 38);	a3 += load(block + 39);	t0 = ternary_logic<0xd8>(c0, b0, d0);	t1 = ternary_logic<0xd8>(c1, b1, d1);	t2 = ternary_logic<0xd8>(c2, b2, d2);	t3 = ternary_logic<0xd8>(c3, b3, d3);	a0 += UINT32_C(0x21e1cde6);	a1 += UINT32_C(0x21e1cde6);	a2 += UINT32_C(0x21e1cde6);	a3 += UINT32_C(0x21e1cde6);	a0 += t0;	a1 += t1;	a2 += t2;	a3 += t3;	a0 = rotl<uint32_t,  5>(a0,  5);	a1 = rotl<uint32_t,  5>(a1,  5);	a2 = rotl<uint32_t,  5>(a2,  5);	a3 = rotl<uint32_t,  5>(a3,  5);	a0 += b0;	a1 += b1;	a2 += b2;	a3 += b3;
	d0 += load(block + 56);	d1 += load(block + 57);	d2 += load(block + 58);	d3 += load(block + 59);	t0 = ternary_logic<0xd8>(b0, a0, c0);	t1 = ternary_logic<0xd8>(b1, a1, c1);	t2 = ternary_logic<0xd8>(b2, a2, c2);	t3 = ternary_logic<0xd8>(b3, a3, c3);	d0 += UINT32_C(0xc33707d6);	d1 += UINT32_C(0xc33707d6);	d2 += UINT32_C(0xc33707d6);	d3 += UINT32_C(0xc33707d6);	d0 += t0;	d1 += t1;	d2 += t2;	d3 += t3;	d0 = rotl<uint32_t,  9>(d0,  9);	d1 = rotl<uint32_t,  9>(d1,  9);	d2 = rotl<uint32_t,  9>(d2,  9);	d3 = rotl<uint32_t,  9>(d3,  9);	d0 += a0;	d1 += a1;	d2 += a2;	d3 += a3;
	c0 += load(block + 12);	c1 += load(block + 13);	c2 += load(block + 14);	c3 += load(block + 15);	t0 = ternary_logic<0xd8>(a0, d0, b0);	t1 = ternary_logic<0xd8>(a1, d1, b1);	t2 = ternary_logic<0xd8>(a2, d2, b2);	t3 = ternary_logic<0xd8>(a3, d3, b3);	c0 += UINT32_C(0xf4d50d87);	c1 += UINT32_C(0xf4d50d87);	c2 += UINT32_C(0xf4d50d87);	c3 += UINT32_C(0xf4d50d87);	c0 += t0;	c1 += t1;	c2 += t2;	c3 += t3;	c0 = rotl<uint32_t, 14>(c0, 14);	c1 = rotl<uint32_t, 14>(c1, 14);	c2 = rotl<uint32_t, 14>(c2, 14);	c3 = rotl<uint32_t, 14>(c3, 14);	c0 += d0;	c1 += d1;	c2 += d2;	c3 += d3;
	b0 += load(block + 32);	b1 += load(block + 33);	b2 += load(block + 34);	b3 += load(block + 35);	t0 = ternary_logic<0xd8>(d0, c0, a0);	t1 = ternary_logic<0xd8>(d1, c1, a1);	t2 = ternary_logic<0xd8>(d2, c2, a2);	t3 = ternary_logic<0xd8>(d3, c3, a3);	b0 += UINT32_C(0x455a14ed);	b1 += UINT32_C(0x455a14ed);	b2 += UINT32_C(0x455a14ed);	b3 += UINT32_C(0x455a14ed);	b0 += t0;	b1 += t1;	b2 += t2;	b3 += t3;	b0 = rotl<uint32_t, 20>(b0, 20);	b1 = rotl<uint32_t, 20>(b1, 20);	b2 = rotl<uint32_t, 20>(b2, 20);	b3 = rotl<uint32_t, 20>(b3, 20);	b0 += c0;	b1 += c1;	b2 += c2;	b3 += c3;
	a0 += load(block + 52);	a1 += load(block + 53);	a2 += load(block + 54);	a3 += load(block + 55);	t0 = ternary_logic<0xd8>(c0, b0, d0);	t1 = ternary_logic<0xd8>(c1, b1, d1);	t2 = ternary_logic<0xd8>(c2, b2, d2);	t3 = ternary_logic<0xd8>(c3, b3, d3);	a0 += UINT32_C(0xa9e3e905);	a1 += UINT32_C(0xa9e3e905);	a2 += UINT32_C(0xa9e3e905);	a3 += UINT32_C(0xa9e3e905);	a0 += t0;	a1 += t1;	a2 += t2;	a3 += t3;	a0 = rotl<uint32_t,  5>(a0,  5);	a1 = rotl<uint32_t,  5>(a1,  5);	a2 = rotl<uint32_t,  5>(a2,  5);	a3 = rotl<uint32_t,  5>(a3,  5);	a0 += b0;	a1 += b1;	a2 += b2;	a3 += b3;
	d0 += load(block +  8);	d1 += load(block +  9);	d2 += load(block + 10);	d3 += load(block + 11);	t0 = ternary_logic<0xd8>(b0, a0, c0);	t1 = ternary_logic<0xd8>(b1, a1, c1);	t2 = ternary_logic<0xd8>(b2, a2, c2);	t3 = ternary_logic<0xd8>(b3, a3, c3);	d0 += UINT32_C(0xfcefa3f8);	d1 += UINT32_C(0xfcefa3f8);	d2 += UINT32_C(0xfcefa3f8);	d3 += UINT32_C(0xfcefa3f8);	d0 += t0;	d1 += t1;	d2 += t2;	d3 += t3;	d0 = rotl<uint32_t,  9>(d0,  9);	d1 = rotl<uint32_t,  9>(d1,  9);	d2 = rotl<uint32_t,  9>(d2,  9);	d3 = rotl<uint32_t,  9>(d3,  9);	d0 += a0;	d1 += a1;	d2 += a2;	d3 += a3;
	c0 += load(block + 28);	c1 += load(block + 29);	c2 += load(block + 30);	c3 += load(block + 31);	t0 = ternary_logic<0xd8>(a0, d0, b0);	t1 = ternary_logic<0xd8>(a1, d1, b1);	t2 = ternary_logic<0xd8>(a2, d2, b2);	t3 = ternary_logic<0xd8>(a3, d3, b3);	c0 += UINT32_C(0x676f02d9);	c1 += UINT32_C(0x676f02d9);	c2 += UINT32_C(0x676f02d9);	c3 += UINT32_C(0x676f02d9);	c0 += t0;	c1 += t1;	c2 += t2;	c3 += t3;	c0 = rotl<uint32_t, 14>(c0, 14);	c1 = rotl<uint32_t, 14>(c1, 14);	c2 = rotl<uint32_t, 14>(c2, 14);	c3 = rotl<uint32_t, 14>(c3, 14);	c0 += d0;	c1 += d1;	c2 += d2;	c3 += d3;
	b0 += load(block + 48);	b1 += load(block + 49);	b2 += load(block + 50);	b3 += load(block + 51);	t0 = ternary_logic<0xd8>(d0, c0, a0);	t1 = ternary_logic<0xd8>(d1, c1, a1);	t2 = ternary_logic<0xd8>(d2, c2, a2);	t3 = ternary_logic<0xd8>(d3, c3, a3);	b0 += UINT32_C(0x8d2a4c8a);	b1 += UINT32_C(0x8d2a4c8a);	b2 += UINT32_C(0x8d2a4c8a);	b3 += UINT32_C(0x8d2a4c8a);	b0 += t0;	b1 += t1;	b2 += t2;	b3 += t3;	b0 = rotl<uint32_t, 20>(b0, 20);	b1 = rotl<uint32_t, 20>(b1, 20);	b2 = rotl<uint32_t, 20>(b2, 20);	b3 = rotl<uint32_t, 20>(b3, 20);	b0 += c0;	b1 += c1;	b2 += c2;	b3 += c3;

	// Round 3
	a0 += load(block + 20);	a1 += load(block + 21);	a2 += load(block + 22);	a3 += load(block + 23);	t0 = ternary_logic<0x96>(d0, c0, b0);	t1 = ternary_logic<0x96>(d1, c1, b1);	t2 = ternary_logic<0x96>(d2, c2, b2);	t3 = ternary_logic<0x96>(d3, c3, b3);	a0 += UINT32_C(0xfffa3942);	a1 += UINT32_C(0xfffa3942);	a2 += UINT32_C(0xfffa3942);	a3 += UINT32_C(0xfffa3942);	a0 += t0;	a1 += t1;	a2 += t2;	a3 += t3;	a0 = rotl<uint32_t,  4>(a0,  4);	a1 = rotl<uint32_t,  4>(a1,  4);	a2 = rotl<uint32_t,  4>(a2,  4);	a3 = rotl<uint32_t,  4>(a3,  4);	a0 += b0;	a1 += b1;	a2 += b2;	a3 += b3;
	d0 += load(block + 32);	d1 += load(block + 33);	d2 += load(block + 34);	d3 += load(block + 35);	t0 = ternary_logic<0x96>(c0, b0, a0);	t1 = ternary_logic<0x96>(c1, b1, a1);	t2 = ternary_logic<0x96>(c2, b2, a2);	t3 = ternary_logic<0x96>(c3, b3, a3);	d0 += UINT32_C(0x8771f681);	d1 += UINT32_C(0x8771f681);	d2 += UINT32_C(0x8771f681);	d3 += UINT32_C(0x8771f681);	d0 += t0;	d1 += t1;	d2 += t2;	d3 += t3;	d0 = rotl<uint32_t, 11>(d0, 11);	d1 = rotl<uint32_t, 11>(d1, 11);	d2 = rotl<uint32_t, 11>(d2, 11);	d3 = rotl<uint32_t, 11>(d3, 11);	d0 += a0;	d1 += a1;	d2 += a2;	d3 += a3;
	c0 += load(block + 44);	c1 += load(block + 45);	c2 += load(block + 46);	c3 += load(block + 47);	t0 = ternary_logic<0x96>(b0, a0, d0);	t1 = ternary_logic<0x96>(b1, a1, d1);	t2 = ternary_logic<0x96>(b2, a2, d2);	t3 = ternary_logic<0x96>(b3, a3, d3);	c0 += UINT32_C(0x6d9d6122);	c1 += UINT32_C(0x6d9d6122);	c2 += UINT32_C(0x6d9d6122);	c3 += UINT32_C(0x6d9d6122);	c0 += t0;	c1 += t1;	c2 += t2;	c3 += t3;	c0 = rotl<uint32_t, 16>(c0, 16);	c1 = rotl<uint32_t, 16>(c1, 16);	c2 = rotl<uint32_t, 16>(c2, 16);	c3 = rotl<uint32_t, 16>(c3, 16);	c0 += d0;	c1 += d1;	c2 += d2;	c3 += d3;
	b0 += load(block + 56);	b1 += load(block + 57);	b2 += load(block + 58);	b3 += load(block + 59);	t0 = ternary_logic<0x96>(a0, d0, c0);	t1 = ternary_logic<0x96>(a1, d1, c1);	t2 = ternary_logic<0x96>(a2, d2, c2);	t3 = ternary_logic<0x96>(a3, d3, c3);	b0 += UINT32_C(0xfde5380c);	b1 += UINT32_C(0xfde5380c);	b2 += UINT32_C(0xfde5380c);	b3 += UINT32_C(0xfde5380c);	b0 += t0;	b1 += t1;	b2 += t2;	b3 += t3;	b0 = rotl<uint32_t, 23>(b0, 23);	b1 = rotl<uint32_t, 23>(b1, 23);	b2 = rotl<uint32_t, 23>(b2, 23);	b3 = rotl<uint32_t, 23>(b3, 23);	b0 += c0;	b1 += c1;	b2 += c2;	b3 += c3;
	a0 += load(block +  4);	a1 += load(block +  5);	a2 += load(block +  6);	a3 += load(block +  7);	t0 = ternary_logic<0x96>(d0, c0, b0);	t1 = ternary_logic<0x96>(d1, c1, b1);	t2 = ternary_logic<0x96>(d2, c2, b2);	t3 = ternary_logic<0x96>(d3, c3, b3);	a0 += UINT32_C(0xa4beea44);	a1 += UINT32_C(0xa4beea44);	a2 += UINT32_C(0xa4beea44);	a3 += UINT32_C(0xa4beea44);	a0 += t0;	a1 += t1;	a2 += t2;	a3 += t3;	a0 = rotl<uint32_t,  4>(a0,  4);	a1 = rotl<uint32_t,  4>(a1,  4);	a2 = rotl<uint32_t,  4>(a2,  4);	a3 = rotl<uint32_t,  4>(a3,  4);	a0 += b0;	a1 += b1;	a2 += b2;	a3 += b3;
	d0 += load(block + 16);	d1 += load(block + 17);	d2 += load(block + 18);	d3 += load(block + 19);	t0 = ternary_logic<0x96>(c0, b0, a0);	t1 = ternary_logic<0x96>(c1, b1, a1);	t2 = ternary_logic<0x96>(c2, b2, a2);	t3 = ternary_logic<0x96>(c3, b3, a3);	d0 += UINT32_C(0x4bdecfa9);	d1 += UINT32_C(0x4bdecfa9);	d2 += UINT32_C(0x4bdecfa9);	d3 += UINT32_C(0x4bdecfa9);	d0 += t0;	d1 += t1;	d2 += t2;	d3 += t3;	d0 = rotl<uint32_t, 11>(d0, 11);	d1 = rotl<uint32_t, 11>(d1, 11);	d2 = rotl<uint32_t, 11>(d2, 11);	d3 = rotl<uint32_t, 11>(d3, 11);	d0 += a0;	d1 += a1;	d2 += a2;	d3 += a3;
	c0 += load(block + 28);	c1 += load(block + 29);	c2 += load(block + 30);	c3 += load(block + 31);	t0 = ternary_logic<0x96>(b0, a0, d0);	t1 = ternary_logic<0x96>(b1, a1, d1);	t2 = ternary_logic<0x96>(b2, a2, d2);	t3 = ternary_logic<0x96>(b3, a3, d3);	c0 += UINT32_C(0xf6bb4b60);	c1 += UINT32_C(0xf6bb4b60);	c2 += UINT32_C(0xf6bb4b60);	c3 += UINT32_C(0xf6bb4b60);	c0 += t0;	c1 += t1;	c2 += t2;	c3 += t3;	c0 = rotl<uint32_t, 16>(c0, 16);	c1 = rotl<uint32_t, 16>(c1, 16);	c2 = rotl<uint32_t, 16>(c2, 16);	c3 = rotl<uint32_t, 16>(c3, 16);	c0 += d0;	c1 += d1;	c2 += d2;	c3 += d3;
	b0 += load(block + 40);	b1 += load(block + 41);	b2 += load(block + 42);	b3 += load(block + 43);	t0 = ternary_logic<0x96>(a0, d0, c0);	t1 = ternary_logic<0x96>(a1, d1, c1);	t2 = ternary_logic<0x96>(a2, d2, c2);	t3 = ternary_logic<0x96>(a3, d3, c3);	b0 += UINT32_C(0xbebfbc70);	b1 += UINT32_C(0xbebfbc70);	b2 += UINT32_C(0xbebfbc70);	b3 += UINT32_C(0xbebfbc70);	b0 += t0;	b1 += t1;	b2 += t2;	b3 += t3;	b0 = rotl<uint32_t, 23>(b0, 23);	b1 = rotl<uint32_t, 23>(b1, 23);	b2 = rotl<uint32_t, 23>(b2, 23);	b3 = rotl<uint32_t, 23>(b3, 23);	b0 += c0;	b1 += c1;	b2 += c2;	b3 += c3;
	a0 += load(block + 52);	a1 += load(block + 53);	a2 += load(block + 54);	a3 += load(block + 55);	t0 = ternary_logic<0x96>(d0, c0, b0);	t1 = ternary_logic<0x96>(d1, c1, b1);	t2 = ternary_logic<0x96>(d2, c2, b2);	t3 = ternary_logic<0x96>(d3, c3, b3);	a0 += UINT32_C(0x289b7ec6);	a1 += UINT32_C(0x289b7ec6);	a2 += UINT32_C(0x289b7ec6);	a3 += UINT32_C(0x289b7ec6);	a0 += t0;	a1 += t1;	a2 += t2;	a3 += t3;	a0 = rotl<uint32_t,  4>(a0,  4);	a1 = rotl<uint32_t,  4>(a1,  4);	a2 = rotl<uint32_t,  4>(a2,  4);	a3 = rotl<uint32_t,  4>(a3,  4);	a0 += b0;	a1 += b1;	a2 += b2;	a3 += b3;
	d0 += load(block +  0);	d1 += load(block +  1);	d2 += load(block +  2);	d3 += load(block +  3);	t0 = ternary_logic<0x96>(c0, b0, a0);	t1 = ternary_logic<0x96>(c1, b1, a1);	t2 = ternary_logic<0x96>(c2, b2, a2);	t3 = ternary_logic<0x96>(c3, b3, a3);	d0 += UINT32_C(0xeaa127fa);	d1 += UINT32_C(0xeaa127fa);	d2 += UINT32_C(0xeaa127fa);	d3 += UINT32_C(0xeaa127fa);	d0 += t0;	d1 += t1;	d2 += t2;	d3 += t3;	d0 = rotl<uint32_t, 11>(d0, 11);	d1 = rotl<uint32_t, 11>(d1, 11);	d2 = rotl<uint32_t, 11>(d2, 11);	d3 = rotl<uint32_t, 11>(d3, 11);	d0 += a0;	d1 += a1;	d2 += a2;	d3 += a3;
	c0 += load(block + 12);	c1 += load(block + 13);	c2 += load(block + 14);	c3 += load(block + 15);	t0 = ternary_logic<0x96>(b0, a0, d0);	t1 = ternary_logic<0x96>(b1, a1, d1);	t2 = ternary_logic<0x96>(b2, a2, d2);	t3 = ternary_logic<0x96>(b3, a3, d3);	c0 += UINT32_C(0xd4ef3085);	c1 += UINT32_C(0xd4ef3085);	c2 += UINT32_C(0xd4ef3085);	c3 += UINT32_C(0xd4ef3085);	c0 += t0;	c1 += t1;	c2 += t2;	c3 += t3;	c0 = rotl<uint32_t, 16>(c0, 16);	c1 = rotl<uint32_t, 16>(c1, 16);	c2 = rotl<uint32_t, 16>(c2, 16);	c3 = rotl<uint32_t, 16>(c3, 16);	c0 += d0;	c1 += d1;	c2 += d2;	c3 += d3;
	b0 += load(block + 24);	b1 += load(block + 25);	b2 += load(block + 26);	b3 += load(block + 27);	t0 = ternary_logic<0x96>(a0, d0, c0);	t1 = ternary_logic<0x96>(a1, d1, c1);	t2 = ternary_logic<0x96>(a2, d2, c2);	t3 = ternary_logic<0x96>(a3, d3, c3);	b0 += UINT32_C(0x4881d05);	b1 += UINT32_C(0x4881d05);	b2 += UINT32_C(0x4881d05);	b3 += UINT32_C(0x4881d05);	b0 += t0;	b1 += t1;	b2 += t2;	b3 += t3;	b0 = rotl<uint32_t, 23>(b0, 23);	b1 = rotl<uint32_t, 23>(b1, 23);	b2 = rotl<uint32_t, 23>(b2, 23);	b3 = rotl<uint32_t, 23>(b3, 23);	b0 += c0;	b1 += c1;	b2 += c2;	b3 += c3;
	a0 += load(block + 36);	a1 += load(block + 37);	a2 += load(block + 38);	a3 += load(block + 39);	t0 = ternary_logic<0x96>(d0, c0, b0);	t1 = ternary_logic<0x96>(d1, c1, b1);	t2 = ternary_logic<0x96>(d2, c2, b2);	t3 = ternary_logic<0x96>(d3, c3, b3);	a0 += UINT32_C(0xd9d4d039);	a1 += UINT32_C(0xd9d4d039);	a2 += UINT32_C(0xd9d4d039);	a3 += UINT32_C(0xd9d4d039);	a0 += t0;	a1 += t1;	a2 += t2;	a3 += t3;	a0 = rotl<uint32_t,  4>(a0,  4);	a1 = rotl<uint32_t,  4>(a1,  4);	a2 = rotl<uint32_t,  4>(a2,  4);	a3 = rotl<uint32_t,  4>(a3,  4);	a0 += b0;	a1 += b1;	a2 += b2;	a3 += b3;
	d0 += load(block + 48);	d1 += load(block + 49);	d2 += load(block + 50);	d3 += load(block + 51);	t0 = ternary_logic<0x96>(c0, b0, a0);	t1 = ternary_logic<0x96>(c1, b1, a1);	t2 = ternary_logic<0x96>(c2, b2, a2);	t3 = ternary_logic<0x96>(c3, b3, a3);	d0 += UINT32_C(0xe6db99e5);	d1 += UINT32_C(0xe6db99e5);	d2 += UINT32_C(0xe6db99e5);	d3 += UINT32_C(0xe6db99e5);	d0 += t0;	d1 += t1;	d2 += t2;	d3 += t3;	d0 = rotl<uint32_t, 11>(d0, 11);	d1 = rotl<uint32_t, 11>(d1, 11);	d2 = rotl<uint32_t, 11>(d2, 11);	d3 = rotl<uint32_t, 11>(d3, 11);	d0 += a0;	d1 += a1;	d2 += a2;	d3 += a3;
	c0 += load(block + 60);	c1 += load(block + 61);	c2 += load(block + 62);	c3 += load(block + 63);	t0 = ternary_logic<0x96>(b0, a0, d0);	t1 = ternary_logic<0x96>(b1, a1, d1);	t2 = ternary_logic<0x96>(b2, a2, d2);	t3 = ternary_logic<0x96>(b3, a3, d3);	c0 += UINT32_C(0x1fa27cf8);	c1 += UINT32_C(0x1fa27cf8);	c2 += UINT32_C(0x1fa27cf8);	c3 += UINT32_C(0x1fa27cf8);	c0 += t0;	c1 += t1;	c2 += t2;	c3 += t3;	c0 = rotl<uint32_t, 16>(c0, 16);	c1 = rotl<uint32_t, 16>(c1, 16);	c2 = rotl<uint32_t, 16>(c2, 16);	c3 = rotl<uint32_t, 16>(c3, 16);	c0 += d0;	c1 += d1;	c2 += d2;	c3 += d3;
	b0 += load(block +  8);	b1 += load(block +  9);	b2 += load(block + 10);	b3 += load(block + 11);	t0 = ternary_logic<0x96>(a0, d0, c0);	t1 = ternary_logic<0x96>(a1, d1, c1);	t2 = ternary_logic<0x96>(a2, d2, c2);	t3 = ternary_logic<0x96>(a3, d3, c3);	b0 += UINT32_C(0xc4ac5665);	b1 += UINT32_C(0xc4ac5665);	b2 += UINT32_C(0xc4ac5665);	b3 += UINT32_C(0xc4ac5665);	b0 += t0;	b1 += t1;	b2 += t2;	b3 += t3;	b0 = rotl<uint32_t, 23>(b0, 23);	b1 = rotl<uint32_t, 23>(b1, 23);	b2 = rotl<uint32_t, 23>(b2, 23);	b3 = rotl<uint32_t, 23>(b3, 23);	b0 += c0;	b1 += c1;	b2 += c2;	b3 += c3;

	// Round 4
	a0 += load(block +  0);	a1 += load(block +  1);	a2 += load(block +  2);	a3 += load(block +  3);	t0 = ternary_logic<0x39>(b0, c0, d0);	t1 = ternary_logic<0x39>(b1, c1, d1);	t2 = ternary_logic<0x39>(b2, c2, d2);	t3 = ternary_logic<0x39>(b3, c3, d3);	a0 += UINT32_C(0xf4292244);	a1 += UINT32_C(0xf4292244);	a2 += UINT32_C(0xf4292244);	a3 += UINT32_C(0xf4292244);	a0 += t0;	a1 += t1;	a2 += t2;	a3 += t3;	a0 = rotl<uint32_t,  6>(a0,  6);	a1 = rotl<uint32_t,  6>(a1,  6);	a2 = rotl<uint32_t,  6>(a2,  6);	a3 = rotl<uint32_t,  6>(a3,  6);	a0 += b0;	a1 += b1;	a2 += b2;	a3 += b3;
	d0 += load(block + 28);	d1 += load(block + 29);	d2 += load(block + 30);	d3 += load(block + 31);	t0 = ternary_logic<0x39>(a0, b0, c0);	t1 = ternary_logic<0x39>(a1, b1, c1);	t2 = ternary_logic<0x39>(a2, b2, c2);	t3 = ternary_logic<0x39>(a3, b3, c3);	d0 += UINT32_C(0x432aff97);	d1 += UINT32_C(0x432aff97);	d2 += UINT32_C(0x432aff97);	d3 += UINT32_C(0x432aff97);	d0 += t0;	d1 += t1;	d2 += t2;	d3 += t3;	d0 = rotl<uint32_t, 10>(d0, 10);	d1 = rotl<uint32_t, 10>(d1, 10);	d2 = rotl<uint32_t, 10>(d2, 10);	d3 = rotl<uint32_t, 10>(d3, 10);	d0 += a0;	d1 += a1;	d2 += a2;	d3 += a3;
	c0 += load(block + 56);	c1 += load(block + 57);	c2 += load(block + 58);	c3 += load(block + 59);	t0 = ternary_logic<0x39>(d0, a0, b0);	t1 = ternary_logic<0x39>(d1, a1, b1);	t2 = ternary_logic<0x39>(d2, a2, b2);	t3 = ternary_logic<0x39>(d3, a3, b3);	c0 += UINT32_C(0xab9423a7);	c1 += UINT32_C(0xab9423a7);	c2 += UINT32_C(0xab9423a7);	c3 += UINT32_C(0xab9423a7);	c0 += t0;	c1 += t1;	c2 += t2;	c3 += t3;	c0 = rotl<uint32_t, 15>(c0, 15);	c1 = rotl<uint32_t, 15>(c1, 15);	c2 = rotl<uint32_t, 15>(c2, 15);	c3 = rotl<uint32_t, 15>(c3, 15);	c0 += d0;	c1 += d1;	c2 += d2;	c3 += d3;
	b0 += load(block + 20);	b1 += load(block + 21);	b2 += load(block + 22);	b3 += load(block + 23);	t0 = ternary_logic<0x39>(c0, d0, a0);	t1 = ternary_logic<0x39>(c1, d1, a1);	t2 = ternary_logic<0x39>(c2, d2, a2);	t3 = ternary_logic<0x39>(c3, d3, a3);	b0 += UINT32_C(0xfc93a039);	b1 += UINT32_C(0xfc93a039);	b2 += UINT32_C(0xfc93a039);	b3 += UINT32_C(0xfc93a039);	b0 += t0;	b1 += t1;	b2 += t2;	b3 += t3;	b0 = rotl<uint32_t, 21>(b0, 21);	b1 = rotl<uint32_t, 21>(b1, 21);	b2 = rotl<uint32_t, 21>(b2, 21);	b3 = rotl<uint32_t, 21>(b3, 21);	b0 += c0;	b1 += c1;	b2 += c2;	b3 += c3;
	a0 += load(block + 48);	a1 += load(block + 49);	a2 += load(block + 50);	a3 += load(block + 51);	t0 = ternary_logic<0x39>(b0, c0, d0);	t1 = ternary_logic<0x39>(b1, c1, d1);	t2 = ternary_logic<0x39>(b2, c2, d2);	t3 = ternary_logic<0x39>(b3, c3, d3);	a0 += UINT32_C(0x655b59c3);	a1 += UINT32_C(0x655b59c3);	a2 += UINT32_C(0x655b59c3);	a3 += UINT32_C(0x655b59c3);	a0 += t0;	a1 += t1;	a2 += t2;	a3 += t3;	a0 = rotl<uint32_t,  6>(a0,  6);	a1 = rotl<uint32_t,  6>(a1,  6);	a2 = rotl<uint32_t,  6>(a2,  6);	a3 = rotl<uint32_t,  6>(a3,  6);	a0 += b0;	a1 += b1;	a2 += b2;	a3 += b3;
	d0 += load(block + 12);	d1 += load(block + 13);	d2 += load(block + 14);	d3 += load(block + 15);	t0 = ternary_logic<0x39>(a0, b0, c0);	t1 = ternary_logic<0x39>(a1, b1, c1);	t2 = ternary_logic<0x39>(a2, b2, c2);	t3 = ternary_logic<0x39>(a3, b3, c3);	d0 += UINT32_C(0x8f0ccc92);	d1 += UINT32_C(0x8f0ccc92);	d2 += UINT32_C(0x8f0ccc92);	d3 += UINT32_C(0x8f0ccc92);	d0 += t0;	d1 += t1;	d2 += t2;	d3 += t3;	d0 = rotl<uint32_t, 10>(d0, 10);	d1 = rotl<uint32_t, 10>(d1, 10);	d2 = rotl<uint32_t, 10>(d2, 10);	d3 = rotl<uint32_t, 10>(d3, 10);	d0 += a0;	d1 += a1;	d2 += a2;	d3 += a3;
	c0 += load(block + 40);	c1 += load(block + 41);	c2 += load(block + 42);	c3 += load(block + 43);	t0 = ternary_logic<0x39>(d0, a0, b0);	t1 = ternary_logic<0x39>(d1, a1, b1);	t2 = ternary_logic<0x39>(d2, a2, b2);	t3 = ternary_logic<0x39>(d3, a3, b3);	c0 += UINT32_C(0xffeff47d);	c1 += UINT32_C(0xffeff47d);	c2 += UINT32_C(0xffeff47d);	c3 += UINT32_C(0xffeff47d);	c0 += t0;	c1 += t1;	c2 += t2;	c3 += t3;	c0 = rotl<uint32_t, 15>(c0, 15);	c1 = rotl<uint32_t, 15>(c1, 15);	c2 = rotl<uint32_t, 15>(c2, 15);	c3 = rotl<uint32_t, 15>(c3, 15);	c0 += d0;	c1 += d1;	c2 += d2;	c3 += d3;
	b0 += load(block +  4);	b1 += load(block +  5);	b2 += load(block +  6);	b3 += load(block +  7);	t0 = ternary_logic<0x39>(c0, d0, a0);	t1 = ternary_logic<0x39>(c1, d1, a1);	t2 = ternary_logic<0x39>(c2, d2, a2);	t3 = ternary_logic<0x39>(c3, d3, a3);	b0 += UINT32_C(0x85845dd1);	b1 += UINT32_C(0x85845dd1);	b2 += UINT32_C(0x85845dd1);	b3 += UINT32_C(0x85845dd1);	b0 += t0;	b1 += t1;	b2 += t2;	b3 += t3;	b0 = rotl<uint32_t, 21>(b0, 21);	b1 = rotl<uint32_t, 21>(b1, 21);	b2 = rotl<uint32_t, 21>(b2, 21);	b3 = rotl<uint32_t, 21>(b3, 21);	b0 += c0;	b1 += c1;	b2 += c2;	b3 += c3;
	a0 += load(block + 32);	a1 += load(block + 33);	a2 += load(block + 34);	a3 += load(block + 35);	t0 = ternary_logic<0x39>(b0, c0, d0);	t1 = ternary_logic<0x39>(b1, c1, d1);	t2 = ternary_logic<0x39>(b2, c2, d2);	t3 = ternary_logic<0x39>(b3, c3, d3);	a0 += UINT32_C(0x6fa87e4f);	a1 += UINT32_C(0x6fa87e4f);	a2 += UINT32_C(0x6fa87e4f);	a3 += UINT32_C(0x6fa87e4f);	a0 += t0;	a1 += t1;	a2 += t2;	a3 += t3;	a0 = rotl<uint32_t,  6>(a0,  6);	a1 = rotl<uint32_t,  6>(a1,  6);	a2 = rotl<uint32_t,  6>(a2,  6);	a3 = rotl<uint32_t,  6>(a3,  6);	a0 += b0;	a1 += b1;	a2 += b2;	a3 += b3;
	d0 += load(block + 60);	d1 += load(block + 61);	d2 += load(block + 62);	d3 += load(block + 63);	t0 = ternary_logic<0x39>(a0, b0, c0);	t1 = ternary_logic<0x39>(a1, b1, c1);	t2 = ternary_logic<0x39>(a2, b2, c2);	t3 = ternary_logic<0x39>(a3, b3, c3);	d0 += UINT32_C(0xfe2ce6e0);	d1 += UINT32_C(0xfe2ce6e0);	d2 += UINT32_C(0xfe2ce6e0);	d3 += UINT32_C(0xfe2ce6e0);	d0 += t0;	d1 += t1;	d2 += t2;	d3 += t3;	d0 = rotl<uint32_t, 10>(d0, 10);	d1 = rotl<uint32_t, 10>(d1, 10);	d2 = rotl<uint32_t, 10>(d2, 10);	d3 = rotl<uint32_t, 10>(d3, 10);	d0 += a0;	d1 += a1;	d2 += a2;	d3 += a3;
	c0 += load(block + 24);	c1 += load(block + 25);	c2 += load(block + 26);	c3 += load(block + 27);	t0 = ternary_logic<0x39>(d0, a0, b0);	t1 = ternary_logic<0x39>(d1, a1, b1);	t2 = ternary_logic<0x39>(d2, a2, b2);	t3 = ternary_logic<0x39>(d3, a3, b3);	c0 += UINT32_C(0xa3014314);	c1 += UINT32_C(0xa3014314);	c2 += UINT32_C(0xa3014314);	c3 += UINT32_C(0xa3014314);	c0 += t0;	c1 += t1;	c2 += t2;	c3 += t3;	c0 = rotl<uint32_t, 15>(c0, 15);	c1 = rotl<uint32_t, 15>(c1, 15);	c2 = rotl<uint32_t, 15>(c2, 15);	c3 = rotl<uint32_t, 15>(c3, 15);	c0 += d0;	c1 += d1;	c2 += d2;	c3 += d3;
	b0 += load(block + 52);	b1 += load(block + 53);	b2 += load(block + 54);	b3 += load(block + 55);	t0 = ternary_logic<0x39>(c0, d0, a0);	t1 = ternary_logic<0x39>(c1, d1, a1);	t2 = ternary_logic<0x39>(c2, d2, a2);	t3 = ternary_logic<0x39>(c3, d3, a3);	b0 += UINT32_C(0x4e0811a1);	b1 += UINT32_C(0x4e0811a1);	b2 += UINT32_C(0x4e0811a1);	b3 += UINT32_C(0x4e0811a1);	b0 += t0;	b1 += t1;	b2 += t2;	b3 += t3;	b0 = rotl<uint32_t, 21>(b0, 21);	b1 = rotl<uint32_t, 21>(b1, 21);	b2 = rotl<uint32_t, 21>(b2, 21);	b3 = rotl<uint32_t, 21>(b3, 21);	b0 += c0;	b1 += c1;	b2 += c2;	b3 += c3;
	a0 += load(block + 16);	a1 += load(block + 17);	a2 += load(block + 18);	a3 += load(block + 19);	t0 = ternary_logic<0x39>(b0, c0, d0);	t1 = ternary_logic<0x39>(b1, c1, d1);	t2 = ternary_logic<0x39>(b2, c2, d2);	t3 = ternary_logic<0x39>(b3, c3, d3);	a0 += UINT32_C(0xf7537e82);	a1 += UINT32_C(0xf7537e82);	a2 += UINT32_C(0xf7537e82);	a3 += UINT32_C(0xf7537e82);	a0 += t0;	a1 += t1;	a2 += t2;	a3 += t3;	a0 = rotl<uint32_t,  6>(a0,  6);	a1 = rotl<uint32_t,  6>(a1,  6);	a2 = rotl<uint32_t,  6>(a2,  6);	a3 = rotl<uint32_t,  6>(a3,  6);	a0 += b0;	a1 += b1;	a2 += b2;	a3 += b3;
	d0 += load(block + 44);	d1 += load(block + 45);	d2 += load(block + 46);	d3 += load(block + 47);	t0 = ternary_logic<0x39>(a0, b0, c0);	t1 = ternary_logic<0x39>(a1, b1, c1);	t2 = ternary_logic<0x39>(a2, b2, c2);	t3 = ternary_logic<0x39>(a3, b3, c3);	d0 += UINT32_C(0xbd3af235);	d1 += UINT32_C(0xbd3af235);	d2 += UINT32_C(0xbd3af235);	d3 += UINT32_C(0xbd3af235);	d0 += t0;	d1 += t1;	d2 += t2;	d3 += t3;	d0 = rotl<uint32_t, 10>(d0, 10);	d1 = rotl<uint32_t, 10>(d1, 10);	d2 = rotl<uint32_t, 10>(d2, 10);	d3 = rotl<uint32_t, 10>(d3, 10);	d0 += a0;	d1 += a1;	d2 += a2;	d3 += a3;
	c0 += load(block +  8);	c1 += load(block +  9);	c2 += load(block + 10);	c3 += load(block + 11);	t0 = ternary_logic<0x39>(d0, a0, b0);	t1 = ternary_logic<0x39>(d1, a1, b1);	t2 = ternary_logic<0x39>(d2, a2, b2);	t3 = ternary_logic<0x39>(d3, a3, b3);	c0 += UINT32_C(0x2ad7d2bb);	c1 += UINT32_C(0x2ad7d2bb);	c2 += UINT32_C(0x2ad7d2bb);	c3 += UINT32_C(0x2ad7d2bb);	c0 += t0;	c1 += t1;	c2 += t2;	c3 += t3;	c0 = rotl<uint32_t, 15>(c0, 15);	c1 = rotl<uint32_t, 15>(c1, 15);	c2 = rotl<uint32_t, 15>(c2, 15);	c3 = rotl<uint32_t, 15>(c3, 15);	c0 += d0;	c1 += d1;	c2 += d2;	c3 += d3;
	b0 += load(block + 36);	b1 += load(block + 37);	b2 += load(block + 38);	b3 += load(block + 39);	t0 = ternary_logic<0x39>(c0, d0, a0);	t1 = ternary_logic<0x39>(c1, d1, a1);	t2 = ternary_logic<0x39>(c2, d2, a2);	t3 = ternary_logic<0x39>(c3, d3, a3);	b0 += UINT32_C(0xeb86d391);	b1 += UINT32_C(0xeb86d391);	b2 += UINT32_C(0xeb86d391);	b3 += UINT32_C(0xeb86d391);	b0 += t0;	b1 += t1;	b2 += t2;	b3 += t3;	b0 = rotl<uint32_t, 21>(b0, 21);	b1 = rotl<uint32_t, 21>(b1, 21);	b2 = rotl<uint32_t, 21>(b2, 21);	b3 = rotl<uint32_t, 21>(b3, 21);	b0 += c0;	b1 += c1;	b2 += c2;	b3 += c3;

	// Save state
	store(state +  0, load(state +  0) + a0);	store(state +  1, load(state +  1) + a1);	store(state +  2, load(state +  2) + a2);	store(state +  3, load(state +  3) + a3);
	store(state + 12, load(state + 12) + d0);	store(state + 13, load(state + 13) + d1);	store(state + 14, load(state + 14) + d2);	store(state + 15, load(state + 15) + d3);
	store(state +  8, load(state +  8) + c0);	store(state +  9, load(state +  9) + c1);	store(state + 10, load(state + 10) + c2);	store(state + 11, load(state + 11) + c3);
	store(state +  4, load(state +  4) + b0);	store(state +  5, load(state +  5) + b1);	store(state +  6, load(state +  6) + b2);	store(state +  7, load(state +  7) + b3);
}

